generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  email         String         @unique
  name          String?
  comments      Comment[]
  favorites     Favorite[]
  pinnedRecipes PinnedRecipe[]
  recipes       Recipe[]
  reviews       Review[]
}

model Recipe {
  id             Int                 @id @default(autoincrement())
  title          String
  imageUrl       String
  description    String
  userId         String
  views          Int                 @default(0)
  favoritesCount Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  comments       Comment[]
  favoritedBy    Favorite[]          @relation("RecipeToFavorites")
  ingredients    Ingredient[]
  instructions   Instruction[]
  pinnedBy       PinnedRecipe[]
  user           User                @relation(fields: [userId], references: [id])
  categories     RecipeCategory[]
  cuisineTypes   RecipeCuisineType[]
  seasons        RecipeSeason[]
  specialDiets   RecipeSpecialDiet[]
  tags           RecipeTag[]
  reviews        Review[]
}

model PinnedRecipe {
  id        Int      @id @default(autoincrement())
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation("RecipeToFavorites", fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id      Int              @id @default(autoincrement())
  name    String           @unique
  recipes RecipeCategory[]
}

model Tag {
  id      Int         @id @default(autoincrement())
  name    String      @unique
  recipes RecipeTag[]
}

model CuisineType {
  id            Int                 @id @default(autoincrement())
  name          String              @unique
  recipeCuisine RecipeCuisineType[]
}

model Season {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  recipeSeason RecipeSeason[]
}

model SpecialDiet {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  recipeSpecialDiet RecipeSpecialDiet[]
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  quantity String
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Instruction {
  id       Int    @id @default(autoincrement())
  step     String
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeCategory {
  recipeId   Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@id([recipeId, categoryId])
}

model RecipeTag {
  recipeId Int
  tagId    Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([recipeId, tagId])
}

model RecipeCuisineType {
  recipeId      Int
  cuisineTypeId Int
  cuisineType   CuisineType @relation(fields: [cuisineTypeId], references: [id])
  recipe        Recipe      @relation(fields: [recipeId], references: [id])

  @@id([recipeId, cuisineTypeId])
}

model RecipeSeason {
  recipeId Int
  seasonId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  season   Season @relation(fields: [seasonId], references: [id])

  @@id([recipeId, seasonId])
}

model RecipeSpecialDiet {
  recipeId      Int
  specialDietId Int
  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  specialDiet   SpecialDiet @relation(fields: [specialDietId], references: [id])

  @@id([recipeId, specialDietId])
}
